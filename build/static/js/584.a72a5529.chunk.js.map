{"version":3,"file":"static/js/584.a72a5529.chunk.js","mappings":"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","sources":["shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlacesList.js","places/pages/UserPlaces.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nimport \"./Map.css\";\n\nconst Map = (props) => {\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    new window.ol.Map({\n      target: mapRef.current.id,\n      layers: [\n        new window.ol.layer.Tile({\n          source: new window.ol.source.OSM(),\n        }),\n      ],\n      view: new window.ol.View({\n        center: window.ol.proj.fromLonLat([center.lng, center.lat]),\n        zoom: zoom,\n      }),\n    });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n      id=\"map\"\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useContext, useState } from \"react\";\n\nimport \"./PlaceItem.css\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nconst PlaceItem = (props) => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    const placeId = props.id;\n\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"DELETE\",\n        null,\n        {\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={props.closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you Sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone!\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React, { useContext } from \"react\";\n\nimport \"./PlacesList.css\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport PlaceItem from \"./PlaceItem\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nconst PlacesList = (props) => {\n  const auth = useContext(AuthContext);\n  const loggedUserId = auth.userId;\n\n  if (props.places.length === 0) {\n    if (loggedUserId !== props.userId) {\n      return (\n        <div className=\"center\">\n          <h2>No places for this user.</h2>\n        </div>\n      );\n    }\n    return (\n      <div className=\"place-list center\">\n        <Card className=\"empty-places-card\">\n          <h2>No places found! Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"place-list\">\n      {props.places.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlacesList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport PlacesList from \"../components/PlacesList\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst UserPlaces = () => {\n  const userId = useParams().userId; // useParams is used to access dynamic parameters\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlaces, setLoadedPlaces] = useState();\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {\n        console.log(err.message);\n        setLoadedPlaces([]);\n      }\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner asOverlay />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlacesList\n          userId={userId}\n          places={loadedPlaces}\n          onDeletePlace={placeDeletedHandler}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"names":["props","mapRef","useRef","center","zoom","useEffect","window","ol","Map","target","current","id","layers","layer","Tile","source","OSM","view","View","proj","fromLonLat","lng","lat","_jsx","ref","className","concat","style","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","showMap","setShowMap","useState","showConfirmModal","setShowConfirmModal","cancelDeleteHandler","_jsxs","React","children","ErrorModal","onClear","Modal","show","onCancel","closeMapHandler","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","async","placeId","process","Authorization","token","onDelete","err","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","openMapHandler","userId","creatorId","to","showDeleteWarningHandler","loggedUserId","places","length","map","place","PlaceItem","creator","location","onDeletePlace","UserPlaces","useParams","loadedPlaces","setLoadedPlaces","responseData","console","log","message","fetchPlaces","PlacesList","deletedPlaceId","prevPlaces","filter"],"sourceRoot":""}