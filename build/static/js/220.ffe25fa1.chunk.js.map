{"version":3,"file":"static/js/220.ffe25fa1.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useEffect, useReducer } from \"react\";\n\nimport \"./Input.css\";\nimport { validate } from \"../../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state, // storing the current state in this new object\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  // useReducer is similar to useState but it is used to manage complex states,\n  // also when there is interconnection between states\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    // inputState = initial state\n    // dispatch = this is then how we will be able to dispatch actions to the reducer funtion\n    // (inputReducer), which will run through the function and return a new state, which\n    // will then update initial state (inputState) and re-render the component\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialValidity,\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\nconst VALIDATOR_TYPE_MIN = \"MIN\";\nconst VALIDATOR_TYPE_MAX = \"MAX\";\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\nconst VALIDATOR_TYPE_FILE = \"FILE\";\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useContext, useState } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./Auth.css\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    console.log(formState.inputs);\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n          // method:\n          \"POST\",\n          // body always has to be in JSON format, JSON.stringify() method takes regular js data\n          // (array or object) and convert it JSON.\n          // body:\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          // headers:\n          {\n            \"Content-Type\": \"application/json\",\n            // Since backend is expecting to recieve data in json format, we are defining the\n            // Content-Type as json.\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n          // method:\n          \"POST\",\n          // body:\n          formData\n          // By using FormData(), right headers are added automatically.\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an Image.\"\n            />\n          )}\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"names":["props","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","useHttpClient","inputHandler","setFormData","email","password","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","preventDefault","console","log","responseData","process","JSON","stringify","login","userId","token","err","formData","FormData","append","name","image","Input","ImageUpload","disabled","inverse","switchModeHandler","undefined","prevMode"],"sourceRoot":""}