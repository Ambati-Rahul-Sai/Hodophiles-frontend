{"version":3,"file":"static/js/981.f59af908.chunk.js","mappings":"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","sources":["places/pages/NewPlace.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./PlaceForm.css\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nconst NewPlace = (props) => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      address: {\n        value: \"\",\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      const formData = new FormData();\n      formData.append(\"title\", formState.inputs.title.value);\n      formData.append(\"description\", formState.inputs.description.value);\n      formData.append(\"address\", formState.inputs.address.value);\n      formData.append(\"image\", formState.inputs.image.value);\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + \"/places\",\n        \"POST\",\n        formData,\n        // headers:\n        {\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(`/${auth.userId}/places`);\n      // push() allows us to go to a new page by adding it on the stack\n      // replace() allows us to replace the current page in the stack.\n    } catch (err) {\n      // Redirect user to a different page\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title!\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description! (atleast 5 characters)\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address!\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"Please provide an Image.\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n","import React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: \"none\" }}\n        type=\"file\"\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useEffect, useReducer } from \"react\";\n\nimport \"./Input.css\";\nimport { validate } from \"../../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state, // storing the current state in this new object\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  // useReducer is similar to useState but it is used to manage complex states,\n  // also when there is interconnection between states\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    // inputState = initial state\n    // dispatch = this is then how we will be able to dispatch actions to the reducer funtion\n    // (inputReducer), which will run through the function and return a new state, which\n    // will then update initial state (inputState) and re-render the component\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialValidity,\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\nconst VALIDATOR_TYPE_MIN = \"MIN\";\nconst VALIDATOR_TYPE_MAX = \"MAX\";\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\nconst VALIDATOR_TYPE_FILE = \"FILE\";\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["props","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","formState","inputHandler","useForm","title","value","isValid","description","address","image","history","useHistory","_jsxs","React","children","_jsx","ErrorModal","onClear","className","onSubmit","async","event","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","concat","userId","err","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","Button","disabled","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","pickedFile","fileIsValid","target","files","length","center","src","alt","onClick","pickImageHandler","current","click","inputReducer","state","action","val","validate","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","placeholder","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}