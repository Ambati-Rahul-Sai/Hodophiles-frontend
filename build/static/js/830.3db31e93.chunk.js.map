{"version":3,"file":"static/js/830.3db31e93.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport \"./PlaceForm.css\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const history = useHistory();\n\n  const placeId = useParams().placeId;\n  // console.log(placeId);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const [identifiedPlace, setIdentifiedPlace] = useState();\n  const [userId, setUserId] = useState();\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setIdentifiedPlace(responseData.place);\n        setUserId(responseData.place.creator);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [placeId, sendRequest, setFormData]);\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!identifiedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      const responseData = await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(`/${userId}/places`); // userId === auth.userId\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.title.value}\n          initialValid={formState.inputs.title.isValid}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (min. 5 characters).\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.description.value}\n          initialValid={formState.inputs.description.isValid}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          UPDATE PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import React, { useEffect, useReducer } from \"react\";\n\nimport \"./Input.css\";\nimport { validate } from \"../../util/validators\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state, // storing the current state in this new object\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  // useReducer is similar to useState but it is used to manage complex states,\n  // also when there is interconnection between states\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    // inputState = initial state\n    // dispatch = this is then how we will be able to dispatch actions to the reducer funtion\n    // (inputReducer), which will run through the function and return a new state, which\n    // will then update initial state (inputState) and re-render the component\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialValidity,\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\nconst VALIDATOR_TYPE_MIN = \"MIN\";\nconst VALIDATOR_TYPE_MAX = \"MAX\";\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\nconst VALIDATOR_TYPE_FILE = \"FILE\";\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["UpdatePlace","auth","useContext","AuthContext","isLoading","error","sendRequest","clearError","useHttpClient","history","useHistory","placeId","useParams","formState","inputHandler","setFormData","useForm","title","value","isValid","description","identifiedPlace","setIdentifiedPlace","useState","userId","setUserId","useEffect","async","responseData","concat","process","place","creator","err","fetchPlace","_jsx","className","children","LoadingSpinner","Card","_jsxs","React","ErrorModal","onClear","onSubmit","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled","inputReducer","state","action","val","validate","isTouched","props","inputState","dispatch","useReducer","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","length","test"],"sourceRoot":""}